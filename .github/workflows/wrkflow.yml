# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - name: PM2 INSTALL
      run: npm i pm2@latest -g
    
    - name: Login to Docker hub
      uses: docker/login-action@v3
      with:
           username: ${{ secrets.DOCKERHUB_USERNAME }}
           password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3


    - name: Build and push
      uses: docker/build-push-action@v5
      with:
             context: .
             file: ./Dockerfile
             push: true
             tags: ${{ secrets.DOCKERHUB_USERNAME }}/clockbox:latest
    
    
    # - name: Starting Docker
    #   uses: actions/checkout@v3
    
     
    # - name: Pull Image
    #   run: sudo docker pull -a ${{ secrets.DOCKERHUB_USERNAME }}/clockbox
     
    # - name: Deploy Image
    #   run: sudo docker run -dp 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/clockbox:latest
    - name: Set SSH key permissions
      run: chmod 600 ${{ secrets.EC2_SSH_KEY }}
    - name: Deploy to Server 1
      uses: appleboy/ssh-action@master
      with:
        key: ${{ secrets.EC2_SSH_KEY }}
        host: ${{ secrets.HOST_DNS }}
        username: ${{ secrets.USERNAME }}
        scripts: |
                  chmod +x ./deploy.sh
                  ./deploy.sh
        # scripts: |
        #      sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/clockbox:latest
        #      sudo docker stop backend_server||true
        #      sudo docker rm backend_server||true
        #      sudo docker run -d -p 8080:80 --name backend_server ${{ secrets.DOCKERHUB_USERNAME }}/clockbox:latest
    
         
         
    

   